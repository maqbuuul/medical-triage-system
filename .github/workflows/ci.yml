name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 pylint
    
    - name: Create directories
      run: |
        mkdir -p logs artifacts models plots data
    
    - name: Lint with flake8
      run: |
        flake8 --count --select=E9,F63,F7,F82 --show-source --statistics *.py
        flake8 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics *.py
    
    - name: Format check with black
      run: |
        black --check --line-length=88 *.py
    
    - name: Test imports and basic functionality
      run: |
        python -c "from config import *; print('✅ Configuration OK')"
        python -c "from logging_config import setup_logging; print('✅ Logging OK')"
        python -c "from mlflow_tracking import MLflowTracker; print('✅ MLflow OK')"
    
    - name: Test FastAPI app
      run: |
        python -c "from fastapi_app import app; print('✅ FastAPI OK')"
    
    - name: Test Streamlit app syntax
      run: |
        python -m py_compile streamlit_dashboard.py
        echo "✅ Streamlit syntax OK"

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t medical-triage:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm medical-triage:latest train --help || echo "Docker test completed"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security checks
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        safety check --file requirements.txt || true
        bandit -r . -f json || true